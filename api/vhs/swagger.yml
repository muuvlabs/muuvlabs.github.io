swagger: "2.0"
info:
  description: "This API was created for SEB, as part of a Video Hosting Service, specifically for Bar Method to start."
  version: "1.0.0"
  title: "SEB Video Hosting Service API"
  contact:
    email: "micah@muuvlabs.com"
host: "vhs.sebrands.com"
basePath: "/"
tags:
- name: "track"
  description: "Public: Web beacon for tracking analytics events"
- name: "episodes"
  description: "Episodes Info"
- name: "series"
  description: "Series Info"
- name: "instructors"
  description: "Instructor Info"
- name: "chart"
  description: "Admins Only: Chart formatted data for views and other analytics"
- name: "brands"
  description: "Admins Only: Settings for each brand (Stronger U, The Bar Method)"
- name: "members"
  description: "Admins Only: Info and settings about the members"
- name: "tag_groups"
  description: "Admins Only: Tag groups"
- name: "tags"
  description: "Admins Only: Tags"
- name: "content_tags"
  description: "Admins Only: Content Tags"
- name: "track_events"
  description: "Admins Only: Analytic events"
schemes:
- "https"
paths:
  /vhs/identify.gif:
    get:
      tags:
      - "track"
      summary: "Identify the user info"
      description: "This is similar to how Segment/Rudderstack sends an identify call to send the user info the first time, then separate calls for each analytics event. This is sent as a blank 1 pixel gif to maximize support. Allows for cross-domain requests, works without JS, and doesn't care about the response."
      operationId: "vhsIdentify"
      produces:
      - "image/gif"
      parameters:
      - name: "uuid"
        in: "query"
        description: "Uuid that was generated clientside, for tracking a session"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "query"
        description: "The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "brand_user_id"
        in: "query"
        description: "The id of the user in the remote system."
        required: false
        type: "string"
      - name: "first_name"
        in: "query"
        description: "The first name of the user."
        required: false
        type: "string"
      - name: "last_name"
        in: "query"
        description: "The last name of the user."
        required: false
        type: "string"
      - name: "email"
        in: "query"
        description: "The email of the user that did the activity."
        required: false
        type: "string"
      - name: "referrer"
        in: "query"
        description: "The referring page"
        required: false
        type: "string"
      responses:
        "301":
          description: "redirect to pixel gif"
  /vhs/track.gif:
    get:
      tags:
      - "track"
      summary: "Track an analytics event"
      description: "This is sent as a blank 1 pixel gif to maximize support. Allows for cross-domain requests, works without JS, and doesn't care about the response."
      operationId: "vhsTrack"
      produces:
      - "image/gif"
      parameters:
      - name: "url"
        in: "query"
        description: "The full URL of the page"
        required: false
        type: "string"
      - name: "action"
        in: "query"
        description: "The analytics event, like “loaded”, “start”, “play”, “pause”, “end”, “zoom_click”, “minutes_watched”"
        required: false
        type: "string"
      - name: "uuid"
        in: "query"
        description: "Uuid that was generated clientside, for tracking a session"
        required: false
        type: "string"
      - name: "referrer"
        in: "query"
        description: "The referring page"
        required: false
        type: "string"
      - name: "episode_id"
        in: "query"
        description: "The episode id for what is being watched"
        required: false
        type: "string"
      - name: "duration_ms"
        in: "query"
        description: "Where in the video did they take the action, or how many milliseconds total was watched, for the `view_total` action."
        required: false
        type: "string"
      responses:
        "301":
          description: "redirect to pixel gif"
  /vhs/episodes:
    get:
      tags:
      - "episodes"
      summary: "Get all episodes (based on permissions)"
      description: "Returns results for all the episodes in the system, filtered by the query strings, as long as the user has rights to see it."
      operationId: "vhsEpisodesIndex"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Search terms - search based on name, description, zoom_url, or series name"
        required: false
        type: "string"
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the user has read rights to the brand. If this is blank, then it will include all of the brands that the user has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "series"
        in: "query"
        description: "Dash-delimited list of series ids to include, as long as the user has read rights to the series. If this is blank, then it will include all of the series that the user has read rights to. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "instructors"
        in: "query"
        description: "Dash-delimited list of instructor ids to include. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "visibility"
        in: "query"
        description: "Dash-delimited list of visibility to include. By default, only `published` episodes will show. Admins can use this param to show `unpublished` or `hidden` also. Possible values: 'unpublished', 'hidden', 'published', or 'all' to include all. Example: `unpublished-hidden`."
        required: false
        type: "string"
        default: "published"
      - name: "status"
        in: "query"
        description: "System set value for status of video download/encoding. Dash-delimited list of statuses to include. Default is to show `ready` only. Possible values: `pending`, `approved`, `denied`, or `all` to include all.  Example: `pending-approved`"
        required: false
        type: "string"
        default: "ready"
      - name: "start_int"
        in: "query"
        description: "Milliseconds since epoch for when to start the result set. Includes results on the timestamp."
        required: false
        type: "string"
      - name: "stop_int"
        in: "query"
        description: "Milliseconds since epoch for when to stop the result set. Excludes results on the timestamp."
        required: false
        type: "string"
      - name: "duration_max"
        in: "query"
        description: "If searching by length of recording, this will give an upper limit (inclusive) for `duration_ms` values."
        required: false
        type: "string"
      - name: "duration_min"
        in: "query"
        description: "If searching by length of recording, this will give a lower limit (inclusive) for `duration_ms` values."
        required: false
        type: "string"
      - name: "include_tags"
        in: "query"
        description: "Dash-delimited list of tag IDs to include. Example: `10-24`."
        required: false
        type: "string"
      - name: "exclude_tags"
        in: "query"
        description: "Dash-delimited list of tag IDs to exclude. Example: `10-24`."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Sort by the position, created time, or scheduled time. Default is the most recent first."
        required: false
        type: "string"
        enum:
        - "position-ASC"
        - "position-DESC"
        - "created_at-ASC"
        - "created_at-DESC"
        - "start_at-ASC"
        - "start_at-DESC"
        default: "created_at-DESC"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/EpisodeResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    post:
      tags:
      - "episodes"
      summary: "Admins: Creates an episode with form data"
      description: "Add a new episode."
      operationId: "vhsEpisodesCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the episode"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Long description of the episode"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "series_id"
        in: "formData"
        description: "ID to the series that this episode belongs in."
        required: false
        type: "string"
      - name: "position"
        in: "formData"
        description: "Where should this episode be placed in the series? If this is blank or missing, it will be placed after the last episode in the series."
        required: false
        type: "string"
      - name: "visibility"
        in: "formData"
        description: "For deciding how an episode should show. Unpublished means that it will only show to Admins. Hidden means that it will not show in search results, but can be viewed by going directly to the URL, as long as the user has rights to it. Published means that it will show in the search results if the user has rights to it."
        required: false
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
      - name: "zoom_url"
        in: "formData"
        description: "The URL of the Zoom-hosted recording page. This is for the 'Better' version of the Bar Method integration. Temporary solution, until we start downloading videos."
        required: false
        type: "string"
      - name: "start_int"
        in: "formData"
        description: "Milliseconds since epoch for when the scheduled start time is."
        required: false
        type: "string"
      - name: "stop_int"
        in: "formData"
        description: "Milliseconds since epoch for when the scheduled stop time is."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Episode"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/episodes/public/{episodeUuid}:
    get:
      tags:
      - "episodes"
      summary: "Public: Find episode by UUID"
      description: "Get a specific episode's info using the randomly-generated UUID. This is to allow for 'hidden' episodes, that requires knowing the URL to it."
      operationId: "vhsEpisodesPublic"
      produces:
      - "application/json"
      parameters:
      - name: "episodeUuid"
        in: "path"
        description: "UUID of episode to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/EpisodeSimple"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /vhs/episodes/{episodeId}:
    get:
      tags:
      - "episodes"
      summary: "Admins: Find episode by ID"
      description: "Get a specific episode's info"
      operationId: "vhsEpisodesShow"
      produces:
      - "application/json"
      parameters:
      - name: "episodeId"
        in: "path"
        description: "ID of episode to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Episode"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
    put:
      tags:
      - "episodes"
      summary: "Admins: Updates an episode with form data"
      description: "Changing episode data"
      operationId: "vhsEpisodesUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "episodeId"
        in: "path"
        description: "ID of episode to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Name of the episode"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Long description of the episode"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "series_id"
        in: "formData"
        description: "ID to the series that this episode belongs in."
        required: false
        type: "string"
      - name: "position"
        in: "formData"
        description: "Where should this episode be placed in the series? If this is blank or missing, it will be placed after the last episode in the series."
        required: false
        type: "string"
      - name: "visibility"
        in: "formData"
        description: "For deciding how an episode should show. Unpublished means that it will only show to Admins. Hidden means that it will not show in search results, but can be viewed by going directly to the URL, as long as the user has rights to it. Published means that it will show in the search results if the user has rights to it."
        required: false
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
      - name: "zoom_url"
        in: "formData"
        description: "The URL of the Zoom-hosted recording page. This is for the 'Better' version of the Bar Method integration. Temporary solution, until we start downloading videos."
        required: false
        type: "string"
      - name: "start_int"
        in: "formData"
        description: "Milliseconds since epoch for when the scheduled start time is."
        required: false
        type: "string"
      - name: "stop_int"
        in: "formData"
        description: "Milliseconds since epoch for when the scheduled stop time is."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Episode"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
    delete:
      tags:
      - "episodes"
      summary: "Delete episode by ID"
      description: "Delete an episode"
      operationId: "vhsEpisodesDelete"
      produces:
      - "application/json"
      parameters:
      - name: "episodeId"
        in: "path"
        description: "ID of episode to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Episode"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
  /vhs/series:
    get:
      tags:
      - "series"
      summary: "Get all series (based on permissions)"
      description: "Returns results for all the series in the system, filtered by the query strings, as long as the user has rights to see it."
      operationId: "vhsSeriesIndex"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Search terms - search based on name or description"
        required: false
        type: "string"
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the user has read rights to the brand. If this is blank, then it will include all of the brands that the user has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "visibility"
        in: "query"
        description: "Dash-delimited list of visibility to include. By default, only `published` will show. Admins can use this param to show `unpublished` or `hidden` also. Possible values: 'unpublished', 'hidden', 'published', or 'all' to include all. Example: `unpublished-hidden`."
        required: false
        type: "string"
        default: "published"
      - name: "sort"
        in: "query"
        description: "Sorting. Default is the name alphabetically."
        required: false
        type: "string"
        enum:
        - "name-asc"
        - "name-desc"
        - "created-asc"
        - "created-desc"
        default: "name-asc"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SeriesResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    post:
      tags:
      - "series"
      summary: "Admins: Creates a series with form data"
      description: "Add a new series."
      operationId: "vhsSeriesCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the series"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Long description of the series"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "visibility"
        in: "formData"
        description: "For deciding how a series should show. Unpublished means that it will only show to Admins. Hidden means that it will not show in search results, but can be viewed by going directly to the URL, as long as the user has rights to it. Published means that it will show in the search results if the user has rights to it."
        required: false
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
        default: "unpublished"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Series"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/series/public/{seriesUuid}:
    get:
      tags:
      - "series"
      summary: "Public: Find series by UUID"
      description: "Get a specific series' info using the randomly-generated UUID. This is to allow for 'hidden' series, that requires knowing the URL to it."
      operationId: "vhsSeriesPublic"
      produces:
      - "application/json"
      parameters:
      - name: "seriesUuid"
        in: "path"
        description: "UUID of series to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SeriesSimple"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /vhs/series/{seriesId}:
    get:
      tags:
      - "series"
      summary: "Admin: Find series by ID"
      description: "Get a specific series' info"
      operationId: "vhsSeriesShow"
      produces:
      - "application/json"
      parameters:
      - name: "seriesId"
        in: "path"
        description: "ID of series to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Series"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
    put:
      tags:
      - "series"
      summary: "Admins: Updates an episode with form data"
      description: "Changing episode data"
      operationId: "vhsSeriesUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "seriesId"
        in: "path"
        description: "ID of episode to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Name of the series"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Long description of the series"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "visibility"
        in: "formData"
        description: "For deciding how a series should show. Unpublished means that it will only show to Admins. Hidden means that it will not show in search results, but can be viewed by going directly to the URL, as long as the user has rights to it. Published means that it will show in the search results if the user has rights to it."
        required: false
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
        default: "unpublished"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Series"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
    delete:
      tags:
      - "series"
      summary: "Delete series by ID"
      description: "Delete a specific series"
      operationId: "vhsSeriesDelete"
      produces:
      - "application/json"
      parameters:
      - name: "seriesId"
        in: "path"
        description: "ID of series to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Series"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
  /vhs/instructors:
    get:
      tags:
      - "instructors"
      summary: "Admins: Get all instructors"
      description: "Returns results for all the instructors in the system. If the requestor is an Admin, they see all of the instructor info. Non-admins only see the Simple data."
      operationId: "vhsInstructorsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Search terms - search based on name or description"
        required: false
        type: "string"
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the user has read rights to the brand. If this is blank, then it will include all of the brands that the user has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "visibility"
        in: "query"
        description: "Dash-delimited list of visibility to include. By default, only `published` will show. Admins can use this param to show `unpublished` or `hidden` also. Possible values: 'unpublished', 'hidden', 'published', or 'all' to include all. Example: `unpublished-hidden`."
        required: false
        type: "string"
        default: "published"
      - name: "sort"
        in: "query"
        description: "Sorting. Default is the name alphabetically."
        required: false
        type: "string"
        enum:
        - "name-asc"
        - "name-desc"
        - "created-asc"
        - "created-desc"
        default: "name-asc"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/InstructorsResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    post:
      tags:
      - "instructors"
      summary: "Admins: Creates an instructor with form data"
      description: "To add a new instructor"
      operationId: "vhsInstructorsCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the instructor"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Bio of the instructor"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "brand_user_id"
        in: "formData"
        description: "The ID for the user in remote system (MarianaTek for Bar Method)"
        required: false
        type: "string"
      - name: "brand_wordress_id"
        in: "formData"
        description: "The ID for the user in remote Wordpress system"
        required: false
        type: "string"
      - name: "avatar_url"
        in: "formData"
        description: "URL for instructor photo. Only used if no Asset photo is uploaded."
        required: false
        type: "string"
      - name: "visibility"
        in: "formData"
        description: "For deciding how an instructor should show. Unpublished means that it will only show to Admins. Hidden means that it will not show in search results, but can be viewed by going directly to the URL, as long as the user has rights to it. Published means that it will show in the search results if the user has rights to it."
        required: false
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
        default: "unpublished"
      - name: "email"
        in: "formData"
        description: "Email of instructor"
        required: false
        type: "string"
      - name: "favorite"
        in: "formData"
        description: "Favorite Barre Move for The Bar Method instructors. Can be used for other favorite things in other brands later."
        required: false
        type: "string"
      - name: "start_int"
        in: "formData"
        description: "Milliseconds since epoch for when the instructor began teaching."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Instructor"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/instructors/public/{instructorUuid}:
    get:
      tags:
      - "instructors"
      summary: "Public: Find instructor by UUID"
      description: "Get a specific instructor's info using the randomly-generated UUID. This is to allow for 'hidden' instructor, that requires knowing the URL to it."
      operationId: "vhsInstructorsPublic"
      produces:
      - "application/json"
      parameters:
      - name: "instructorUuid"
        in: "path"
        description: "UUID of instructor to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/InstructorSimple"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /vhs/instructors/{instructorId}:
    get:
      tags:
      - "instructors"
      summary: "Admins: Find instructor by ID"
      description: "Get a specific instructor's info. If the requestor is an Admin, they see all of the instructor info. Non-admins only see the Simple data."
      operationId: "vhsInstructorsShow"
      produces:
      - "application/json"
      parameters:
      - name: "instructorId"
        in: "path"
        description: "ID of the tag to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Instructor"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
    put:
      tags:
      - "instructors"
      summary: "Admins: Updates an instructor with form data"
      description: "Change the info of a instructor"
      operationId: "vhsInstructorsUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "instructorId"
        in: "path"
        description: "ID of instructor to update"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Name of the instructor"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Bio of the instructor"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "brand_user_id"
        in: "formData"
        description: "The ID for the user in remote system (MarianaTek for Bar Method)"
        required: false
        type: "string"
      - name: "brand_wordress_id"
        in: "formData"
        description: "The ID for the user in remote Wordpress system"
        required: false
        type: "string"
      - name: "avatar_url"
        in: "formData"
        description: "URL for instructor photo. Only used if no Asset photo is uploaded."
        required: false
        type: "string"
      - name: "visibility"
        in: "formData"
        description: "For deciding how an instructor should show. Unpublished means that it will only show to Admins. Hidden means that it will not show in search results, but can be viewed by going directly to the URL, as long as the user has rights to it. Published means that it will show in the search results if the user has rights to it."
        required: false
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
        default: "unpublished"
      - name: "email"
        in: "formData"
        description: "Email of instructor"
        required: false
        type: "string"
      - name: "favorite"
        in: "formData"
        description: "Favorite Barre Move for The Bar Method instructors. Can be used for other favorite things in other brands later."
        required: false
        type: "string"
      - name: "start_int"
        in: "formData"
        description: "Milliseconds since epoch for when the instructor began teaching."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Instructor"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
    delete:
      tags:
      - "instructors"
      summary: "Admins: Deletes an instructor"
      description: "Paranoid delete: sets the deleted_at to the timestamp"
      operationId: "vhsInstructorsDelete"
      produces:
      - "application/json"
      parameters:
      - name: "instructorId"
        in: "path"
        description: "ID of instructor to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Instructor"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/chart:
    get:
      tags:
      - "chart"
      summary: "Admins: Gather counts for charting"
      description: "This will only include the counts, over a given time series. Try to set the `start_int` and `stop_int` for full days in the member's timezone."
      operationId: "referralsChart"
      produces:
      - "application/json"
      parameters:
      - name: "actions"
        in: "query"
        description: "Dash-delimited list of action event types to include, like “loaded”, “start”, “play”, “pause”, “end”, “zoom_click”, “minutes_watched”. If this is blank, then it will include all of the actions. Example: `play-end` If the action `minutes_watched` is included, then it will give that number as the SUM total minutes watched, instead of the COUNT of event actions."
        required: false
        type: "string"
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the member has read rights to the brand. If this is blank, then it will include all of the brands that the member has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "episodes"
        in: "query"
        description: "Dash-delimited list of episode ids to include, as long as the member has read rights to it. If this is blank, then it will include all of the records that the user has read rights to. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "series"
        in: "query"
        description: "Dash-delimited list of series ids to include, as long as the member has read rights to it. If this is blank, then it will include all of the records that the user has read rights to. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "instructors"
        in: "query"
        description: "Dash-delimited list of instructor ids to include, as long as the member has read rights to it. If this is blank, then it will include all of the records that the user has read rights to. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "member_id"
        in: "query"
        description: "The Referral System's member id for this person, as long as the viewer has read rights to the brand and program the member is in."
        required: false
        type: "string"
      - name: "group_by"
        in: "query"
        description: "Groups the results into day, hour, or minute. Default is `day`."
        required: false
        type: "string"
        enum:
        - "day"
        - "hour"
        - "minute"
      - name: "timezone"
        in: "query"
        description: "Optional string timezone to label the days. If not given, the system will assume the start_int is the beginning of a day, and label accordingly. Example: `America/Chicago`"
        required: false
        type: "string"
      - name: "start_int"
        in: "query"
        description: "Milliseconds since epoch for when to start the result set. Includes results on the timestamp."
        required: false
        type: "string"
      - name: "stop_int"
        in: "query"
        description: "Milliseconds since epoch for when to stop the result set. Excludes results on the timestamp."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ChartData"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
      security:
      - jwt: []
  /vhs/brands:
    get:
      tags:
      - "brands"
      summary: "Admins: Get all brands"
      description: "Returns results for all the brands in the system"
      operationId: "vhsBrandsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      - name: "enabled"
        in: "query"
        description: "For viewing the brands that are enabled or not, or all brands. Default is to show all brands."
        required: false
        type: "string"
        enum:
        - "all"
        - "1"
        - "0"
        default: "all"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BrandResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
      security:
      - jwt: []
    post:
      tags:
      - "brands"
      summary: "Admins: Creates a brand with form data"
      description: "This won't be used much, just adding a new Brand"
      operationId: "vhsBrandsCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "ident"
        in: "formData"
        description: "Short code of the brand. Should ideally be one of: `su`, `tbm`, `af` though we can add more brands also."
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Full name of the brand, like `Stronger U`"
        required: false
        type: "string"
      - name: "is_enabled"
        in: "formData"
        description: "Is this brand using the service?"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Brand"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/brands/{brandIdent}:
    get:
      tags:
      - "brands"
      summary: "Admins: Find brand by short code string"
      description: "We're using the code instead of the integer as the primary identifier. So using 'su', 'tbm', or 'af'"
      operationId: "vhsBrandsShow"
      produces:
      - "application/json"
      parameters:
      - name: "brandIdent"
        in: "path"
        description: "Short code of brand to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Brand"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
    put:
      tags:
      - "brands"
      summary: "Admins: Updates a brand with form data"
      description: "This is used for defaults for this brand."
      operationId: "vhsBrandsUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "brandIdent"
        in: "path"
        description: "Short code of brand to update"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Full name of the brand, like `Stronger U`"
        required: false
        type: "string"
      - name: "is_enabled"
        in: "formData"
        description: "Is this brand using the service?"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Brand"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/members:
    get:
      tags:
      - "members"
      summary: "Admins: Get all members"
      description: "Returns results for all the members in the system"
      operationId: "vhsMembersIndex"
      produces:
      - "application/json"
      parameters:
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the user has read rights to the brand. If this is blank, then it will include all of the brands that the user has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MemberResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
      security:
      - jwt: []
  /vhs/members/{memberId}:
    get:
      tags:
      - "members"
      summary: "Admins: Find member by ID"
      description: "Get a specific member's info"
      operationId: "vhsMembersShow"
      produces:
      - "application/json"
      parameters:
      - name: "memberId"
        in: "path"
        description: "ID of member to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Member"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
  /vhs/tag_groups:
    get:
      tags:
      - "tag_groups"
      summary: "Admins: Get all tag groups"
      description: "Returns results for all the tag groups in the system"
      operationId: "vhsTagGroupsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the user has read rights to the brand. If this is blank, then it will include all of the brands that the user has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagGroupResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
      security:
      - jwt: []
    post:
      tags:
      - "tag_groups"
      summary: "Admins: Creates a tag group with form data"
      description: "To add a new group of tags"
      operationId: "vhsTagGroupsCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the tag group"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "Optional. The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "position"
        in: "formData"
        description: "Where should this tag group be placed in the Admin? If this is blank or missing, it will be placed at the end of the list."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagGroup"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/tag_groups/{tagGroupId}:
    get:
      tags:
      - "tag_groups"
      summary: "Admins: Find tag group by ID"
      description: "Get a specific tag group's info"
      operationId: "vhsTagGroupsShow"
      produces:
      - "application/json"
      parameters:
      - name: "tagGroupId"
        in: "path"
        description: "ID of the tag group to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagGroup"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
    put:
      tags:
      - "tag_groups"
      summary: "Admins: Updates a tag group with form data"
      description: "Change the name or position of a tag group"
      operationId: "vhsTagGroupsUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "tagGroupId"
        in: "path"
        description: "ID of tag group to update"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Name of the tag group"
        required: false
        type: "string"
      - name: "brand_ident"
        in: "formData"
        description: "Optional. The brand code for this, like `tbm`"
        required: false
        type: "string"
      - name: "position"
        in: "formData"
        description: "Where should this tag group be placed in the Admin? If this is blank or missing, it will be placed at the end of the list."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagGroup"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
    delete:
      tags:
      - "tag_groups"
      summary: "Admins: Deletes a tag group"
      description: "Paranoid delete: sets the deleted_at to the timestamp"
      operationId: "vhsTagGroupsDelete"
      produces:
      - "application/json"
      parameters:
      - name: "tagGroupId"
        in: "path"
        description: "ID of tag group to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagGroup"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/tags:
    get:
      tags:
      - "tags"
      summary: "Admins: Get all tags"
      description: "Returns results for all the tags in the system"
      operationId: "vhsTagsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "tag_groups"
        in: "query"
        description: "Dash-delimited list of tag group ids to include, as long as the user has read rights to the tag group. If this is blank, then it will include all of the tag groups that the user has read rights to. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
      security:
      - jwt: []
    post:
      tags:
      - "tags"
      summary: "Admins: Creates a tag with form data"
      description: "To add a new tags"
      operationId: "vhsTagsCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the tag"
        required: false
        type: "string"
      - name: "tag_group_id"
        in: "formData"
        description: "Tag group that this tag belongs to"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/tags/{tagId}:
    get:
      tags:
      - "tags"
      summary: "Admins: Find tag by ID"
      description: "Get a specific tag's info"
      operationId: "vhsTagsShow"
      produces:
      - "application/json"
      parameters:
      - name: "tagId"
        in: "path"
        description: "ID of the tag to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
    put:
      tags:
      - "tags"
      summary: "Admins: Updates a tag with form data"
      description: "Change the name or position of a tag"
      operationId: "vhsTagsUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "tagId"
        in: "path"
        description: "ID of tag to update"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Name of the tag"
        required: false
        type: "string"
      - name: "tag_group_id"
        in: "formData"
        description: "Tag group that this tag belongs to"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
    delete:
      tags:
      - "tags"
      summary: "Admins: Deletes a tag"
      description: "Paranoid delete: sets the deleted_at to the timestamp"
      operationId: "vhsTagsDelete"
      produces:
      - "application/json"
      parameters:
      - name: "tagId"
        in: "path"
        description: "ID of tag to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/content_tags:
    get:
      tags:
      - "content_tags"
      summary: "Admins: Get all content tags"
      description: "Returns results for all the content_tags in the system"
      operationId: "vhsContentTagsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentTagResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
      security:
      - jwt: []
    post:
      tags:
      - "content_tags"
      summary: "Admins: Creates a content tag with form data"
      description: "To add a new content tags"
      operationId: "vhsContentTagsCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "content_type"
        in: "formData"
        description: "Model name of the resource to be tagged."
        required: false
        type: "string"
      - name: "content_id"
        in: "formData"
        description: "ID of the resource to be tagged."
        required: false
        type: "string"
      - name: "tag_id"
        in: "formData"
        description: "The tag that should be added."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentTag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/content_tags/{contentTagId}:
    get:
      tags:
      - "content_tags"
      summary: "Admins: Find content tag by ID"
      description: "Get a specific content tag's info"
      operationId: "vhsContentTagsShow"
      produces:
      - "application/json"
      parameters:
      - name: "contentTagId"
        in: "path"
        description: "ID of the content tag to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentTag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
    put:
      tags:
      - "content_tags"
      summary: "Admins: Updates a content tag with form data"
      description: "Join table for how things are tagged."
      operationId: "vhsContentTagsUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "contentTagId"
        in: "path"
        description: "ID of tag to update"
        required: true
        type: "string"
      - name: "content_type"
        in: "formData"
        description: "Model name of the resource to be tagged."
        required: false
        type: "string"
      - name: "content_id"
        in: "formData"
        description: "ID of the resource to be tagged."
        required: false
        type: "string"
      - name: "tag_id"
        in: "formData"
        description: "The tag that should be added."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentTag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
    delete:
      tags:
      - "content_tags"
      summary: "Admins: Deletes a content tag"
      description: "Paranoid delete: sets the deleted_at to the timestamp"
      operationId: "vhsContentTagsDelete"
      produces:
      - "application/json"
      parameters:
      - name: "contentTagId"
        in: "path"
        description: "ID of content tag to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentTag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/content_tags/{contentType}/{contentId}/{tagId}:
    delete:
      tags:
      - "content_tags"
      summary: "Admins: Deletes a content tag"
      description: "Paranoid delete: sets the deleted_at to the timestamp"
      operationId: "vhsContentTagsDeleteAlternate"
      produces:
      - "application/json"
      parameters:
      - name: "contentType"
        in: "path"
        description: "Content type of record, like 'Episode'"
        required: true
        type: "string"
      - name: "contentId"
        in: "path"
        description: "ID of content, like the Episode ID"
        required: true
        type: "string"
      - name: "tagId"
        in: "path"
        description: "ID of the tag that is assigned to the content"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ContentTag"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
      security:
      - jwt: []
  /vhs/track_events:
    get:
      tags:
      - "track_events"
      summary: "Admins: Get all track events"
      description: "Returns results for all the track events in the system based on the query string params."
      operationId: "vhsTrackEventsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "actions"
        in: "query"
        description: "Dash-delimited list of action event types to include, like “play”, “view_15”, “view_total”, “pause”, “stop”, “finish”. If this is blank, then it will include all of the actions. Example: `view-play`"
        required: false
        type: "string"
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the user has read rights to the brand. If this is blank, then it will include all of the brands that the user has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "series"
        in: "query"
        description: "Dash-delimited list of series ids to include, as long as the user has read rights to the series. If this is blank, then it will include all of the series that the user has read rights to. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "episodes"
        in: "query"
        description: "Dash-delimited list of episode ids to include, as long as the user has read rights to the episode. If this is blank, then it will include all of the programs that the user has read rights to. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "member_id"
        in: "query"
        description: "VHS's member id for the user that did the action."
        required: false
        type: "string"
      - name: "uuid"
        in: "query"
        description: "Filter by a specific uuid"
        required: false
        type: "string"
      - name: "start_int"
        in: "query"
        description: "Milliseconds since epoch for when to start the result set. Includes results on the timestamp."
        required: false
        type: "string"
      - name: "stop_int"
        in: "query"
        description: "Milliseconds since epoch for when to stop the result set. Excludes results on the timestamp."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Sort by the most recent, or the oldest first. Default is the most recent first."
        required: false
        type: "string"
        enum:
        - "created-asc"
        - "created-desc"
        default: "created-desc"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TrackEventResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
      security:
      - jwt: []
  /vhs/track_events/{trackEventId}:
    get:
      tags:
      - "track_events"
      summary: "Admins: Find track_event by ID"
      description: "Get a specific track_event's info"
      operationId: "vhsTrackEventShow"
      produces:
      - "application/json"
      parameters:
      - name: "trackEventId"
        in: "path"
        description: "ID of track event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TrackEvent"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
      security:
      - jwt: []
securityDefinitions:
  jwt:
    type: "apiKey"
    name: "jwt"
    in: "header"
definitions:
  ChartData:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
            loaded:
              type: "integer"
              format: "int32"
            start:
              type: "integer"
              format: "int32"
            play:
              type: "integer"
              format: "int32"
            pause:
              type: "integer"
              format: "int32"
            view_total:
              type: "integer"
              format: "int32"
            end:
              type: "integer"
              format: "int32"
            zoom_click:
              type: "integer"
              format: "int32"
            minutes:
              type: "number"
  BrandResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Brand"
  Brand:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Brand"
      id:
        type: "integer"
        format: "int32"
      ident:
        type: "string"
      name:
        type: "string"
      is_enabled:
        type: "boolean"
        default: false
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
  EpisodeResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Episode"
  Episode:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Episode"
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      brand_name:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      series_id:
        type: "integer"
        format: "int32"
      instructor_id:
        type: "integer"
        format: "int32"
      position:
        type: "integer"
        format: "int32"
      visibility:
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
      status:
        type: "string"
        enum:
        - "waiting"
        - "downloading"
        - "processing"
        - "ready"
      zoom_url:
        type: "string"
      start_int:
        type: "integer"
        format: "int32"
      stop_int:
        type: "integer"
        format: "int32"
      duration_ms:
        type: "integer"
        format: "int32"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
      instructor:
        $ref: "#/definitions/InstructorSimple"
      series:
        $ref: "#/definitions/Series"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
  EpisodeSimple:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Episode"
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      series_id:
        type: "integer"
        format: "int32"
      instructor_id:
        type: "integer"
        format: "int32"
      position:
        type: "integer"
        format: "int32"
      zoom_url:
        type: "string"
      start_int:
        type: "integer"
        format: "int32"
      stop_int:
        type: "integer"
        format: "int32"
      duration_ms:
        type: "integer"
        format: "int32"
      instructor:
        $ref: "#/definitions/InstructorSimple"
      series:
        $ref: "#/definitions/SeriesSimple"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
  InstructorsResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Instructor"
  Instructor:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Instructor"
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      brand_user_id:
        type: "string"
      brand_wordpress_id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      visibility:
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
      email:
        type: "string"
      favorite:
        type: "string"
      photo_id:
        type: "integer"
        format: "int32"
      photo_url:
        type: "string"
      avatar_url:
        type: "string"
      start_int:
        type: "integer"
        format: "int32"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
  InstructorSimple:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Instructor"
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      favorite:
        type: "string"
      photo_url:
        type: "string"
      start_int:
        type: "integer"
        format: "int32"
  MemberResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Member"
  Member:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Member"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      brand_user_id:
        type: "string"
      brand_wordpress_id:
        type: "string"
      uuid:
        type: "string"
      first_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
  SeriesResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Series"
  Series:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Series"
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      brand_name:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      visibility:
        type: "string"
        enum:
        - "unpublished"
        - "hidden"
        - "published"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
  SeriesSimple:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Series"
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
  TrackEventResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/TrackEvent"
  TrackEvent:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "TrackEvent"
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      member_id:
        type: "integer"
        format: "int32"
      episode_id:
        type: "integer"
        format: "int32"
      duration_ms:
        type: "integer"
        format: "int32"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      url:
        type: "string"
      action:
        type: "string"
      referrer:
        type: "string"
      ip_address:
        type: "string"
      user_agent:
        type: "string"
      created_int:
        type: "integer"
        format: "int32"
      episode:
        $ref: "#/definitions/Episode"
      member:
        $ref: "#/definitions/Member"
  TagGroupResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/TagGroup"
  TagGroup:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Tag"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      position:
        type: "integer"
        format: "int32"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
  TagResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
  Tag:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Tag"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      tag_group_id:
        type: "integer"
        format: "int32"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
  TagSimple:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  ContentTagResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/ContentTag"
  ContentTag:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "ContentTag"
      id:
        type: "integer"
        format: "int32"
      content_type:
        type: "string"
      content_id:
        type: "integer"
        format: "int32"
      tag_id:
        type: "integer"
        format: "int32"
