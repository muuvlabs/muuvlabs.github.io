swagger: "2.0"
info:
  description: "This API is a subset of the available requests for the Program Engine. These are the requests used for:\n- The Program Engine SDK\n- The Coaching Dashboard Plugin\n- The Stronger U app\n- Any server-to-server communication needed"
  version: "1.0.0"
  title: "SEB Program Engine Public API"
  contact:
    email: "micah@muuvlabs.com"
host: "pe.sebrands.com"
basePath: "/"
tags:
- name: "assets"
  description: "Asset redirect"
- name: "assignments"
  description: "Assignments available to be added"
- name: "categories"
  description: "Categories for assignments"
- name: "configs"
  description: "Config for app"
- name: "me"
  description: "Related to current member"
- name: "plans"
  description: "Plan Info for Members"
- name: "plan_programs"
  description: "Connecting plans to specific programs"
- name: "programs"
  description: "Programs Info"
- name: "tag_groups"
  description: "Tag groups"
- name: "tasks"
  description: "Task information"
- name: "webhooks"
  description: "Server-to-Server Data"
schemes:
- "https"
paths:
  /pe/assets/{resourceType}/{fileType}/{id}.{ext}:
    get:
      tags:
      - "assets"
      summary: "Anytime Fitness Assets Redirect"
      description: "This redirects to assets for Anytime Fitness workouts.\nExamples:\nhttps://pe.sebrands.com/pe/assets/workout/poster/63900.jpg\nhttps://pe.sebrands.com/pe/assets/exercise/poster/2652.jpg\nhttps://pe.sebrands.com/pe/assets/exercise/video/2652.mp4"
      operationId: "peAssetsExerciseRedirect"
      produces:
      - "application/json"
      parameters:
      - name: "resourceType"
        in: "path"
        description: "Type of resource. Either `workout` or `exercise`"
        required: true
        type: "string"
        enum:
        - "workout"
        - "exercise"
      - name: "fileType"
        in: "path"
        description: "Type of file. Either `poster` or `video`"
        required: true
        type: "string"
        enum:
        - "poster"
        - "video"
      - name: "id"
        in: "path"
        description: "ID of the resource"
        required: true
        type: "integer"
      - name: "ext"
        in: "path"
        description: "Placeholder. The redirected file will be decided separately."
        required: true
        type: "string"
      responses:
        "302":
          description: "temporary redirect"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /pe/assignments:
    get:
      tags:
      - "assignments"
      summary: "Get all assignments"
      description: "Returns results for all the assignments in the system"
      operationId: "peAssignmentsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Search terms - search based on name or description"
        required: false
        type: "string"
      - name: "categories"
        in: "query"
        description: "Dash-delimited list of category ids to include. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "include_tags"
        in: "query"
        description: "Dash-delimited list of tag IDs to include. Example: `10-24`."
        required: false
        type: "string"
      - name: "exclude_tags"
        in: "query"
        description: "Dash-delimited list of tag IDs to exclude. Example: `10-24`."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AssignmentResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /pe/assignments/{assignmentId}:
    get:
      tags:
      - "assignments"
      summary: "Find assignment by ID"
      description: "Get a specific assignment info"
      operationId: "peAssignmentsShow"
      produces:
      - "application/json"
      parameters:
      - name: "assignmentId"
        in: "path"
        description: "ID of the assignment to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Assignment"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /pe/categories:
    get:
      tags:
      - "categories"
      summary: "Get all categories"
      description: "Returns results for all the categories in the system"
      operationId: "peCategoriesIndex"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Search terms - search based on name"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CategoryResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /pe/categories/{categoryId}:
    get:
      tags:
      - "categories"
      summary: "Find category by ID"
      description: "Get a specific category info"
      operationId: "peCategoriesShow"
      produces:
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of the category to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /pe/configs/app:
    get:
      tags:
      - "configs"
      summary: "Get the default config for the brand"
      description: "This will be called whenever the app is first starting. It will contain all of the translations we'll need for the user's language."
      operationId: "peConfigsApp"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConfigsApp"
  /pe/members/me:
    get:
      tags:
      - "me"
      summary: "Show the current member"
      description: "This will look at the JWT to give the info for the currently logged-in member."
      operationId: "peMeShow"
      produces:
      - "application/json"
      parameters:
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Member"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /pe/plans/{brandIdent}/{brandUserId}:
    get:
      tags:
      - "plans"
      summary: "Show the plan for a different member"
      description: "Used by coaches in the Coaching Dashboard. This will look at the JWT and check permissions for the logged-in member to access the data for the member provided in the path."
      operationId: "pePlansShowUser"
      produces:
      - "application/json"
      parameters:
      - name: "brandIdent"
        in: "path"
        description: "String code for the brand, like `af` or `su`"
        required: true
        type: "string"
      - name: "brandUserId"
        in: "path"
        description: "The user ID in the remote system."
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Dash-delimited list of associations to include. Possible values:\n `summary`\n`schedule`\n`programs`\n`program`\n`plan_programs`\nExample: `?include=summary-schedule`"
        required: false
        type: "string"
      - name: "refresh"
        in: "query"
        description: "Set this to '1' or 'true'. It tells the server to fetch the most recent plan settings data from the remote system.\nExample: `?refresh=1`"
        required: false
        type: "string"
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      - $ref: '#/parameters/xAppId'
      - $ref: '#/parameters/xApiKey'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Plan"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /pe/plans:
    get:
      tags:
      - "plans"
      summary: "Get all plans"
      description: "Returns results for all the plans in the system"
      operationId: "pePlansIndex"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Search terms - search based on name or description"
        required: false
        type: "string"
      - name: "published"
        in: "query"
        description: "For viewing the programs that are published or not, or all programs. Default is to show all programs."
        required: false
        type: "string"
        enum:
        - "all"
        - "1"
        - "0"
        default: "all"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlanResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /pe/plans/{planId}:
    get:
      tags:
      - "plans"
      summary: "Find program by ID"
      description: "Get a specific program info"
      operationId: "pePlansShow"
      produces:
      - "application/json"
      parameters:
      - name: "planId"
        in: "path"
        description: "ID of the program to show, or `me` to see the plan for the logged-in user."
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Dash-delimited list of associations to include. Possible values:\n `summary`\n`schedule`\n`programs`\n`program`\n`plan_programs`\nExample: `?include=summary-schedule`"
        required: false
        type: "string"
      - name: "refresh"
        in: "query"
        description: "Set this to '1' or 'true'. It tells the server to fetch the most recent plan settings data from the remote system.\nExample: `?refresh=1`"
        required: false
        type: "string"
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Plan"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /pe/plan_programs:
    get:
      tags:
      - "plan_programs"
      summary: "Get all plan_programs"
      description: "Returns results for all the plan_programs in the system"
      operationId: "pePlanProgramsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "plans"
        in: "query"
        description: "Dash-delimited list of plan ids to include. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "programs"
        in: "query"
        description: "Dash-delimited list of program ids to include. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "members"
        in: "query"
        description: "Dash-delimited list of member ids to include. Example: `1-4-5`"
        required: false
        type: "string"
      - name: "include"
        in: "query"
        description: "Dash-delimited list of associated objects to include, by field name. If not given, these fields will be null. Example: `program-plan`"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlanProgramResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    post:
      tags:
      - "plan_programs"
      summary: "Creates a plan_program with form data"
      description: "To add a new plan_program"
      operationId: "pePlanProgramCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "include"
        in: "query"
        description: "Dash-delimited list of associated objects to include, by field name. If not given, these fields will be null. Example: `program-phase`"
        required: false
        type: "string"
      - name: "program_id"
        in: "formData"
        description: "ID of the program."
        required: false
        type: "integer"
      - name: "phase_id"
        in: "formData"
        description: "ID of the phase."
        required: false
        type: "integer"
      - name: "position"
        in: "formData"
        description: "The place this phase should go in the program."
        required: false
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlanProgram"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
  /pe/plan_programs/{planProgramId}:
    get:
      tags:
      - "plan_programs"
      summary: "Find plan_program by ID"
      description: "Get a specific plan_program info"
      operationId: "pePlanProgramsShow"
      produces:
      - "application/json"
      parameters:
      - name: "planProgramId"
        in: "path"
        description: "ID of the plan_program to show"
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Dash-delimited list of associated objects to include, by field name. If not given, these fields will be null. Example: `program-phase`"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlanProgram"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
    put:
      tags:
      - "plan_programs"
      summary: "Updates a plan_program with form data"
      description: "Change the data of a plan_program"
      operationId: "pePlanProgramsUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "planProgramId"
        in: "path"
        description: "ID of plan_program to update"
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Dash-delimited list of associated objects to include, by field name. If not given, these fields will be null. Example: `program-phase`"
        required: false
        type: "string"
      - name: "program_id"
        in: "formData"
        description: "ID of the program."
        required: false
        type: "integer"
      - name: "phase_id"
        in: "formData"
        description: "ID of the phase."
        required: false
        type: "integer"
      - name: "position"
        in: "formData"
        description: "The place this phase should go in the program."
        required: false
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlanProgram"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "plan_programs"
      summary: "Deletes a plan_program"
      description: "Paranoid delete: sets the deleted_at to the timestamp"
      operationId: "pePlanProgramsDelete"
      produces:
      - "application/json"
      parameters:
      - name: "planProgramId"
        in: "path"
        description: "ID of plan_program to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlanProgram"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
  /pe/programs:
    get:
      tags:
      - "programs"
      summary: "Get all programs"
      description: "Returns results for all the programs in the system"
      operationId: "peProgramsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Search terms - search based on name or description"
        required: false
        type: "string"
      - name: "published"
        in: "query"
        description: "For viewing the programs that are published or not, or all programs. Default is to show all programs."
        required: false
        type: "string"
        enum:
        - "all"
        - "1"
        - "0"
        default: "all"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProgramResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /pe/programs/{programId}:
    get:
      tags:
      - "programs"
      summary: "Find program by ID"
      description: "Get a specific program info"
      operationId: "peProgramsShow"
      produces:
      - "application/json"
      parameters:
      - name: "programId"
        in: "path"
        description: "ID of the program to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Program"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /pe/tag_groups:
    get:
      tags:
      - "tag_groups"
      summary: "Get all tag groups"
      description: "Returns results for all the tag groups in the system"
      operationId: "peTagGroupsIndex"
      produces:
      - "application/json"
      parameters:
      - name: "brands"
        in: "query"
        description: "Dash-delimited list of brand idents to include, as long as the user has read rights to the brand. If this is blank, then it will include all of the brands that the user has read rights to. Example: `su-tbm`"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagGroupResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /pe/tag_groups/{tagGroupId}:
    get:
      tags:
      - "tag_groups"
      summary: "Find tag group by ID"
      description: "Get a specific tag group's info"
      operationId: "peTagGroupsShow"
      produces:
      - "application/json"
      parameters:
      - name: "tagGroupId"
        in: "path"
        description: "ID of the tag group to show"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagGroup"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
  /pe/tasks:
    get:
      tags:
      - "tasks"
      summary: "Get all tasks"
      description: "Returns results for all the tasks in the system"
      operationId: "peTasksIndex"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "The page of results to show. Default is 1"
        required: false
        type: "string"
      - name: "per_page"
        in: "query"
        description: "The number of results to show for each page. Default is 10"
        required: false
        type: "string"
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      - $ref: '#/parameters/xAppId'
      - $ref: '#/parameters/xApiKey'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TaskResults"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    post:
      tags:
      - "tasks"
      summary: "Creates a task with form data"
      description: "To add a new task"
      operationId: "peTasksCreate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the task"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Description of the task"
        required: false
        type: "string"
      - name: "category_id"
        in: "formData"
        description: "Category ID for this task"
        required: false
        type: "integer"
      - name: "poster_url"
        in: "formData"
        description: "URL of the poster to use, if a poster image is not uploaded"
        required: false
        type: "string"
      - name: "action"
        in: "formData"
        description: "One of the specific actions that this task should use"
        required: false
        type: "string"
        enum:
        - "none"
        - "browser_external"
        - "browser_internal"
        - "document"
        - "player_video_manual"
        - "player_video_vhs"
        - "player_video_youtube"
        - "player_audio_manual"
        - "player_audio_vhs"
        - "podcast"
        - "workout_af"
        - "workout_muuv"
        - "form_foodlog"
      - name: "action_obj"
        in: "formData"
        description: "JSON object with the parameters for the action. Example: `{\"mp4_url\": \"https://bacon.com/video.mp4\",\n\"hls_url\": \"https://bacon.com/video.m3u8\",\n\"vtt_url\": \"https://bacon.com/video.vtt\"\n}`"
        required: false
        type: "string"
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
  /pe/tasks/{taskId}:
    get:
      tags:
      - "tasks"
      summary: "Find task by ID"
      description: "Get a specific task info"
      operationId: "peTasksShow"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of the task to show"
        required: true
        type: "string"
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
    put:
      tags:
      - "tasks"
      summary: "Updates a task with form data"
      description: "Change the data of a task"
      operationId: "peTasksUpdate"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to update"
        required: true
        type: "string"
      - name: "name"
        in: "formData"
        description: "Name of the task"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Description of the task"
        required: false
        type: "string"
      - name: "category_id"
        in: "formData"
        description: "Category ID for this task"
        required: false
        type: "integer"
      - name: "poster_url"
        in: "formData"
        description: "URL of the poster to use, if a poster image is not uploaded"
        required: false
        type: "string"
      - name: "action"
        in: "formData"
        description: "One of the specific actions that this task should use"
        required: false
        type: "string"
        enum:
        - "none"
        - "browser_external"
        - "browser_internal"
        - "document"
        - "player_video_manual"
        - "player_video_vhs"
        - "player_video_youtube"
        - "player_audio_manual"
        - "player_audio_vhs"
        - "podcast"
        - "workout_af"
        - "workout_muuv"
        - "form_foodlog"
      - name: "action_obj"
        in: "formData"
        description: "JSON object with the parameters for the action. Example: `{\"mp4_url\": \"https://bacon.com/video.mp4\",\n\"hls_url\": \"https://bacon.com/video.m3u8\",\n\"vtt_url\": \"https://bacon.com/video.vtt\"\n}`"
        required: false
        type: "string"
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "tasks"
      summary: "Deletes a task"
      description: "Paranoid delete: sets the deleted_at to the timestamp"
      operationId: "peTasksDelete"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of task to delete"
        required: true
        type: "string"
      - $ref: '#/parameters/xBrand'
      - $ref: '#/parameters/xJwt'
      - $ref: '#/parameters/xLanguage'
      - $ref: '#/parameters/xClient'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
  /pe/webhooks/{brandIdent}:
    post:
      tags:
      - "webhooks"
      summary: "For server-to-server sending of data"
      description: "This will be used to update us that there's been a change in data for PT sessions, door swipes, or anything else."
      operationId: "peWebhooks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "brandIdent"
        in: "path"
        description: "The brand code, like `su` or `af`"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        schema:
          type: "object"
      - $ref: '#/parameters/xAppId'
      - $ref: '#/parameters/xApiKey'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/WebhookResponse"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not found"
        "405":
          description: "Invalid input"
parameters:
  xBrand:
    in: "header"
    name: "x-pe-brand"
    type: "string"
    description: "The brand code, like `su` or `af`"
  xJwt:
    in: "header"
    name: "x-pe-jwt"
    type: "string"
    description: "The JWT token that was passed into the SDK when initializing"
  xLanguage:
    in: "header"
    name: "x-pe-language"
    type: "string"
    description: "The locale, with language and region codes"
  xClient:
    in: "header"
    name: "x-pe-client"
    type: "string"
    description: "Follows the format of `app_platform_major_minor_patch`.\nExamples:\n`sdk_ios_0_5_1`\n`sudna_web_3_7_1`"
  xAppId:
    in: "header"
    name: "x-pe-app-id"
    type: "string"
    description: "Used if doing server-to-server communication."
  xApiKey:
    in: "header"
    name: "x-pe-api-key"
    type: "string"
    description: "The JWT token that was passed into the SDK when initializing"
definitions:
  AssignmentResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Assignment"
  Assignment:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Assignment"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      description:
        type: "string"
      category_id:
        type: "integer"
        format: "int32"
      poster_id:
        type: "integer"
        format: "int32"
      poster_url:
        type: "string"
      action:
        type: "string"
      action_obj:
        type: "string"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
      tag_groups:
        type: "array"
        items:
          $ref: "#/definitions/TagGroupSimple"
  CategoryResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Category"
  Category:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Category"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
  ConfigsApp:
    type: "object"
    properties:
      colors:
        type: "object"
      features:
        type: "object"
      translations:
        type: "object"
      edit_plan:
        type: "object"
  Member:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Member"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      brand_name:
        type: "string"
      brand_user_id:
        type: "string"
      email:
        type: "string"
      first_name:
        type: "string"
      last_name:
        type: "string"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
  PlanResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Plan"
  Plan:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Plan"
      id:
        type: "integer"
      name:
        type: "string"
      brand_ident:
        type: "string"
      member_id:
        type: "integer"
      plan_fitness_level:
        type: "integer"
      plan_overall_strength:
        type: "integer"
      plan_weight_lifting_experience:
        type: "integer"
      plan_cardio_level:
        type: "integer"
      plan_pains:
        type: "array"
        items:
          type: "string"
      plan_pains_custom:
        type: "array"
        items:
          type: "string"
      plan_fitness_goals:
        type: "array"
        items:
          type: "string"
      primary_goal:
        type: "string"
      goal_weight_kg:
        type: "number"
      plan_workout_per_week:
        type: "integer"
      plan_workout_duration_min:
        type: "integer"
      plan_workout_locations:
        type: "array"
        items:
          type: "string"
      equipment:
        type: "array"
        items:
          type: "string"
      is_active:
        type: "boolean"
        default: false
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
      tag_groups:
        type: "array"
        items:
          $ref: "#/definitions/TagGroupSimple"
      summary:
        type: "object"
      schedule:
        type: "object"
      plan_programs:
        type: "array"
        items:
          type: "object"
      programs:
        type: "array"
        items:
          type: "object"
  PlanProgramResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/PlanProgram"
  PlanProgram:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "PlanProgram"
      id:
        type: "integer"
      name:
        type: "string"
      brand_ident:
        type: "string"
      member_id:
        type: "integer"
      plan_id:
        type: "integer"
      program_id:
        type: "integer"
      created_int:
        type: "integer"
      updated_int:
        type: "integer"
      plan:
        type: "object"
      program:
        type: "object"
  ProgramResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Program"
  Program:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Program"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      description:
        type: "string"
      is_published:
        type: "boolean"
        default: false
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
      tag_groups:
        type: "array"
        items:
          $ref: "#/definitions/TagGroupSimple"
  TagSimple:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  TagGroupResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/TagGroup"
  TagGroup:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Tag"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      position:
        type: "integer"
        format: "int32"
      brand_id:
        type: "integer"
        format: "int32"
      brand_ident:
        type: "string"
      created_int:
        type: "integer"
        format: "int32"
      updated_int:
        type: "integer"
        format: "int32"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
  TagGroupSimple:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/TagSimple"
  TaskResults:
    type: "object"
    properties:
      page:
        type: "integer"
        format: "int32"
      per_page:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
      total_pages:
        type: "integer"
        format: "int32"
      results:
        type: "array"
        items:
          $ref: "#/definitions/Task"
  Task:
    type: "object"
    properties:
      class_name:
        type: "string"
        default: "Task"
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      description:
        type: "string"
      order_text:
        type: "string"
      poster_url:
        type: "string"
      graphic_url:
        type: "string"
      video_url:
        type: "string"
      creator_avatar:
        type: "string"
      creator_name:
        type: "string"
      coach_avatar:
        type: "string"
      coach_name:
        type: "string"
      assignment_id:
        type: "integer"
      task_week:
        type: "string"
      task_date:
        type: "string"
      task_int:
        type: "integer"
      completed_int:
        type: "integer"
      is_completed:
        type: "boolean"
      created_int:
        type: "integer"
      updated_int:
        type: "integer"
      is_today:
        type: "boolean"
      is_past:
        type: "boolean"
      is_future:
        type: "boolean"
      start_str:
        type: "string"
      duration:
        type: "string"
      intensity:
        type: "string"
      location:
        type: "string"
      equipment:
        type: "array"
        items:
          type: "string"
      pillar:
        type: "string"
      action:
        type: "object"
  WebhookResponse:
    type: "object"
    properties:
      ok:
        type: "boolean"
        default: true
